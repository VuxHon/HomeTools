class GeminiAI {
    constructor() {
        this.apiKey = 'AIzaSyChS0XC5cLAf1wMk5EMZGqMq9bTvkJA8Sw';
        this.apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
    }

    async parseScheduleMessage(chatMessages, staffList, weekStartDate) {
        try {
            console.log('ü§ñ [GeminiAI] Starting to parse schedule messages...');
            console.log('üìù [GeminiAI] Chat messages:', chatMessages);
            console.log('üë• [GeminiAI] Staff list:', staffList);
            console.log('üìÖ [GeminiAI] Week start:', weekStartDate);

            const prompt = this.buildPrompt(chatMessages, staffList, weekStartDate);
            console.log('üìã [GeminiAI] Generated prompt:', prompt);

            const response = await this.callGeminiAPI(prompt);
            const scheduleData = this.parseGeminiResponse(response);
            
            console.log('‚úÖ [GeminiAI] Parsed schedule data:', scheduleData);
            return scheduleData;

        } catch (error) {
            console.error('‚ùå [GeminiAI] Error parsing schedule:', error);
            throw error;
        }
    }

    buildPrompt(chatMessages, staffList, weekStartDate) {
        const staffListText = staffList.map(staff => `ID: ${staff.id}, T√™n: ${staff.name}`).join('\n');
        
        const weekDays = [
            { day: 'T2', date: this.addDays(weekStartDate, 0) },
            { day: 'T3', date: this.addDays(weekStartDate, 1) },
            { day: 'T4', date: this.addDays(weekStartDate, 2) },
            { day: 'T5', date: this.addDays(weekStartDate, 3) },
            { day: 'T6', date: this.addDays(weekStartDate, 4) },
            { day: 'T7', date: this.addDays(weekStartDate, 5) },
            { day: 'CN', date: this.addDays(weekStartDate, 6) }
        ];

        const weekDaysText = weekDays.map(w => `${w.day}: ${w.date}`).join('\n');

        return `B·∫°n l√† m·ªôt AI chuy√™n ph√¢n t√≠ch tin nh·∫Øn l·ªãch l√†m vi·ªác.

DANH S√ÅCH NH√ÇN VI√äN:
${staffListText}

TU·∫¶N L√ÄM VI·ªÜC (${weekStartDate}):
${weekDaysText}

TIN NH·∫ÆN L·ªäCH L√ÄM VI·ªÜC:
${chatMessages}

ƒê·ªäNH D·∫†NG TIN NH·∫ÆN CHU·∫®N (nh√¢n vi√™n n√™n g·ª≠i theo):
- T√™n nh√¢n vi√™n
- Ng√†y + ca l√†m vi·ªác trong tu·∫ßn
V√≠ d·ª•: "Nguy·ªÖn VƒÉn A - T2 s√°ng, T4 chi·ªÅu, T7 t·ªëi"

Y√äU C·∫¶U PH√ÇN T√çCH:
1. Ph√¢n t√≠ch tin nh·∫Øn ƒë·ªÉ t√¨m ra l·ªãch l√†m vi·ªác c·ªßa t·ª´ng nh√¢n vi√™n trong TU·∫¶N HI·ªÜN T·∫†I
2. Mapping t√™n trong tin nh·∫Øn v·ªõi danh s√°ch nh√¢n vi√™n (c√≥ th·ªÉ c√≥ sai l·ªách ch√≠nh t·∫£)
3. Chuy·ªÉn ƒë·ªïi k√Ω hi·ªáu ng√†y (T2=Th·ª© 2, T3=Th·ª© 3, T4=Th·ª© 4, T5=Th·ª© 5, T6=Th·ª© 6, T7=Th·ª© 7, CN=Ch·ªß nh·∫≠t)
4. Chuy·ªÉn ƒë·ªïi ca l√†m vi·ªác:
   - "ca s√°ng", "s√°ng", "s" ‚Üí "S√°ng"
   - "ca chi·ªÅu", "chi·ªÅu", "c" ‚Üí "Chi·ªÅu"  
   - "ca t·ªëi", "t·ªëi", "t" ‚Üí "T·ªëi"
5. Ch·ªâ l·∫•y l·ªãch l√†m vi·ªác trong tu·∫ßn hi·ªán t·∫°i (${weekStartDate} ƒë·∫øn ${this.addDays(weekStartDate, 6)})
6. N·∫øu tin nh·∫Øn kh√¥ng ƒë√∫ng format, h√£y c·ªë g·∫Øng hi·ªÉu v√† ph√¢n t√≠ch t·ªët nh·∫•t c√≥ th·ªÉ

GHI CH√ö QUAN TR·ªåNG:
- Tu·∫ßn l√†m vi·ªác hi·ªán t·∫°i b·∫Øt ƒë·∫ßu t·ª´ ${weekStartDate}
- Ch·ªâ t·∫°o l·ªãch cho c√°c ng√†y trong tu·∫ßn n√†y
- N·∫øu tin nh·∫Øn kh√¥ng r√µ r√†ng, h√£y b√°o c√°o trong summary

OUTPUT JSON (ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng c√≥ text kh√°c):
{
  "schedules": [
    {
      "staff_id": "id_nh√¢n_vi√™n",
      "staff_name": "t√™n_nh√¢n_vi√™n", 
      "work_date": "YYYY-MM-DD",
      "shift": "S√°ng|Chi·ªÅu|T·ªëi"
    }
  ],
  "summary": "T√≥m t·∫Øt ng·∫Øn g·ªçn nh·ªØng g√¨ ƒë√£ ph√¢n t√≠ch cho tu·∫ßn ${weekStartDate}"
}

V√≠ d·ª• output:
{
  "schedules": [
    {
      "staff_id": "abc123",
      "staff_name": "Tr√¢m Kha",
      "work_date": "2025-01-06", 
      "shift": "Chi·ªÅu"
    }
  ],
  "summary": "ƒê√£ ph√¢n t√≠ch ƒë∆∞·ª£c l·ªãch l√†m c·ªßa 2 nh√¢n vi√™n cho tu·∫ßn 06/01/2025"
}`;
    }

    async callGeminiAPI(prompt) {
        const requestBody = {
            contents: [{
                parts: [{
                    text: prompt
                }]
            }],
            generationConfig: {
                temperature: 0.1,
                topK: 40,
                topP: 0.95,
                maxOutputTokens: 8192,
            }
        };

        const response = await fetch(`${this.apiUrl}?key=${this.apiKey}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            let errorMessage = `Gemini API error: ${response.status}`;
            try {
                const errorData = await response.json();
                console.error('‚ùå [GeminiAI] API Error Details:', errorData);
                
                if (errorData.error && errorData.error.message) {
                    errorMessage += ` - ${errorData.error.message}`;
                }
                
                // Specific error handling
                if (response.status === 400 && errorData.error.message.includes('not found')) {
                    errorMessage = 'Model Gemini kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
                } else if (response.status === 403) {
                    errorMessage = 'API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt quota.';
                } else if (response.status === 429) {
                    errorMessage = 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.';
                }
            } catch (parseError) {
                console.error('‚ùå [GeminiAI] Error parsing error response:', parseError);
            }
            
            throw new Error(errorMessage);
        }

        const data = await response.json();
        console.log('ü§ñ [GeminiAI] Raw API response:', data);
        
        if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
            throw new Error('Invalid response from Gemini API');
        }

        return data.candidates[0].content.parts[0].text;
    }

    parseGeminiResponse(responseText) {
        try {
            // Remove any markdown formatting if present
            let cleanText = responseText.trim();
            if (cleanText.startsWith('```json')) {
                cleanText = cleanText.replace(/```json\s*/, '').replace(/\s*```$/, '');
            } else if (cleanText.startsWith('```')) {
                cleanText = cleanText.replace(/```\s*/, '').replace(/\s*```$/, '');
            }

            const parsedData = JSON.parse(cleanText);
            
            // Validate the structure
            if (!parsedData.schedules || !Array.isArray(parsedData.schedules)) {
                throw new Error('Invalid response structure: missing schedules array');
            }

            // Validate each schedule item
            parsedData.schedules.forEach((schedule, index) => {
                if (!schedule.staff_id || !schedule.work_date || !schedule.shift) {
                    throw new Error(`Invalid schedule item at index ${index}: missing required fields`);
                }
                
                // Validate date format
                if (!/^\d{4}-\d{2}-\d{2}$/.test(schedule.work_date)) {
                    throw new Error(`Invalid date format at index ${index}: ${schedule.work_date}`);
                }
                
                // Validate shift
                if (!['S√°ng', 'Chi·ªÅu', 'T·ªëi'].includes(schedule.shift)) {
                    throw new Error(`Invalid shift at index ${index}: ${schedule.shift}`);
                }
            });

            return parsedData;

        } catch (error) {
            console.error('‚ùå [GeminiAI] Error parsing response:', error);
            console.error('‚ùå [GeminiAI] Raw response:', responseText);
            throw new Error(`Failed to parse Gemini response: ${error.message}`);
        }
    }

    addDays(date, days) {
        const result = new Date(date);
        result.setDate(result.getDate() + days);
        return result.toISOString().split('T')[0]; // YYYY-MM-DD format
    }

    getMonday(date) {
        const d = new Date(date);
        const day = d.getDay();
        const diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday
        return new Date(d.setDate(diff));
    }

    // Debug functions
    async testAPI() {
        try {
            console.log('üß™ [GeminiAI] Testing API connection...');
            
            const testPrompt = 'Tr·∫£ l·ªùi ng·∫Øn g·ªçn: B·∫°n c√≥ ho·∫°t ƒë·ªông kh√¥ng?';
            const response = await this.callGeminiAPI(testPrompt);
            
            console.log('‚úÖ [GeminiAI] API test successful:', response);
            return { success: true, response };
        } catch (error) {
            console.error('‚ùå [GeminiAI] API test failed:', error);
            return { success: false, error: error.message };
        }
    }

    async listModels() {
        try {
            console.log('üìã [GeminiAI] Listing available models...');
            
            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${this.apiKey}`);
            
            if (!response.ok) {
                throw new Error(`Failed to list models: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üìã [GeminiAI] Available models:', data.models);
            
            return data.models;
        } catch (error) {
            console.error('‚ùå [GeminiAI] Error listing models:', error);
            throw error;
        }
    }
}

// Create global instance
try {
    window.geminiAI = new GeminiAI();
} catch (error) {
    console.error('‚ùå [GeminiAI] Failed to create Gemini AI:', error);
} 